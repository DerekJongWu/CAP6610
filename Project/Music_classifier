{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import librosa\n",
    "import pandas as pd\n",
    "import numpy as np \n",
    "#import matplotlib.pyplot as plt\n",
    "import sklearn as sk\n",
    "from PIL import Image\n",
    "import pathlib\n",
    "import csv\n",
    "import pickle\n",
    "import random  \n",
    "import os \n",
    "os.environ['CUDA_VISIBLE_DEVICES']='0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('mfcc_train_20', 'rb') as rf:\n",
    "    mfcc_train = pickle.load(rf)\n",
    "\n",
    "for song in range(len(mfcc_train)):\n",
    "    mfcc_train[song] = sk.preprocessing.scale(mfcc_train[song], axis = 1)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size = 16\n",
    "mfcc = 20\n",
    "no_NonProg = 302\n",
    "no_Prog = 73\n",
    "seg_length = 100 # number of frames\n",
    "\n",
    "no_NonProg_test = 71\n",
    "no_Prog_test =21\n",
    "\n",
    "# for i in range(375):\n",
    "#     print(mfcc_train[i].shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.ones(int(batch_size/2), dtype=np.int)\n",
    "b = np.zeros(int(batch_size/2), dtype=np.int)            \n",
    "batch_label = np.concatenate((a,b), axis=None)\n",
    "y_ohe = np.eye(2)[batch_label] # This is interesting as a quick way for OneHotEncoding\n",
    "batch_label = y_ohe.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def batch_generator(mfcc, segLen, batchSize):  \n",
    "    \n",
    "    while True:\n",
    "        \n",
    "        batch = np.zeros([batchSize, 20 , segLen])\n",
    "        \n",
    "#        np.random.randint(a,b) generates between [a, b) but random.randint(a,b) generates between [a, b]\n",
    "        \n",
    "        for i in range(int(batchSize/2)):\n",
    "                    rnd_song = np.random.randint(0, no_NonProg)\n",
    "                    rnd_frame = np.random.randint(0, mfcc[rnd_song].shape[1]- segLen)\n",
    "                    # print(rnd_song)\n",
    "                    temp = mfcc[rnd_song][:, rnd_frame: rnd_frame + segLen]\n",
    "                    # print(temp.shape)\n",
    "                    # batch[i, :, :] = np.asarray(temp) \n",
    "                    batch[i, :, :] = temp \n",
    "                    # import pdb; pdb.set_trace()\n",
    "\n",
    "        for i in range(int(batchSize/2), batchSize):\n",
    "                    rnd_song = np.random.randint(no_NonProg, no_NonProg+no_Prog)\n",
    "                    rnd_frame = np.random.randint(0, mfcc[rnd_song].shape[1]- segLen)\n",
    "#                     if rnd_frame > mfcc[rnd_song].shape[1]:\n",
    "#                         print('out of index')\n",
    "                        \n",
    "                    temp = mfcc[rnd_song][:, rnd_frame: rnd_frame + segLen]\n",
    "                    batch[i, : , :] = temp\n",
    "         \n",
    "        # batch_temp = np.asarray(batch)\n",
    "        batch_fin = batch.transpose(0,2,1)\n",
    "        \n",
    "#         a = np.ones(int(batch_size/2), dtype=np.int)\n",
    "#         b = np.zeros(int(batch_size/2), dtype=np.int)            \n",
    "        # batch_label.reshape((batch_label.shape[0], 1))\n",
    "\n",
    "        yield batch_fin , batch_label\n",
    "                      \n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('mfcc_test_20', 'rb') as rf:\n",
    "    mfcc_test = pickle.load(rf)\n",
    "\n",
    "for song in range(len(mfcc_test)):\n",
    "    mfcc_test[song] = sk.preprocessing.scale(mfcc_test[song], axis = 1)\n",
    "    \n",
    "# for i, song in enumerate(mfcc_test):\n",
    "#     print(i, song.shape[1])    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def validation_batch_generator(mfcc, segLen, batchSize):  \n",
    "    \n",
    "    while True:\n",
    "        \n",
    "        batch = np.zeros([batchSize, 20 , segLen])\n",
    "        \n",
    "#        batch = [] \n",
    "        \n",
    "        for i in range(int(batchSize/2)):\n",
    "                    rnd_song = np.random.randint(0, no_NonProg_test)\n",
    "                    rnd_frame = np.random.randint(0, mfcc_test[rnd_song].shape[1]- segLen)\n",
    "                    # print(rnd_song)\n",
    "                    temp = mfcc_test[rnd_song][:, rnd_frame: rnd_frame + segLen]\n",
    "                    # print(temp.shape)\n",
    "                    # batch[i, :, :] = np.asarray(temp) \n",
    "                    batch[i, :, :] = temp \n",
    "                    # import pdb; pdb.set_trace()\n",
    "\n",
    "        for i in range(int(batchSize/2), batchSize):\n",
    "            \n",
    "                    rnd_song = np.random.randint(no_NonProg_test, no_NonProg_test + no_Prog_test)\n",
    "                    # rnd_song = random.randint(71, 91)\n",
    "                    rnd_frame = np.random.randint(0, mfcc_test[rnd_song].shape[1]- segLen)\n",
    "                    if rnd_frame > mfcc[rnd_song].shape[1]:\n",
    "                        print('out of index')\n",
    "                        \n",
    "                    temp = mfcc_test[rnd_song][:, rnd_frame: rnd_frame + segLen]\n",
    "                    batch[i, : , :] = temp\n",
    "         \n",
    "        # batch_temp = np.asarray(batch)\n",
    "        batch_fin = batch.transpose(0,2,1)\n",
    "        \n",
    "#         a = np.ones(int(batch_size/2), dtype=np.int)\n",
    "#         b = np.zeros(int(batch_size/2), dtype=np.int)            \n",
    "        # batch_label.reshape((batch_label.shape[0], 1))\n",
    "\n",
    "        yield batch_fin , batch_label\n",
    "                      \n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# import pdb; pdb.set_trace()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# def lstm_model(dropout=0.2, recurrent_dropout = 0.2, number_neurons_layer_1= 64, number_neurons_layer_2 = 32 ):\n",
    "  \n",
    "#   input_shape = (genre_features.train_X.shape[1], genre_features.train_X.shape[2])\n",
    "#   print('Build LSTM RNN model ...')\n",
    "#   model = Sequential()\n",
    "#   model.add(LSTM(batch_size=batch_size, input_shape=(train_batch.shape[1], train_batch.shape[2]), units=number_neurons_layer_1, dropout=dropout, recurrent_dropout=recurrent_dropout, return_sequences=True, input_shape=input_shape))\n",
    "#   model.add(LSTM(units=number_neurons_layer_2, dropout=dropout, recurrent_dropout=recurrent_dropout, return_sequences=False))\n",
    "#   model.add(Dense(units=genre_features.train_Y.shape[1], activation='softmax'))\n",
    "#   model.compile(loss='crossentropy', optimizer=opt, metrics=['accuracy'])\n",
    "#   model.summary()\n",
    "  \n",
    "#   return model\n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "from keras.models import Sequential, Model\n",
    "from keras.layers import Input, Dense, TimeDistributed, LSTM, Dropout, Activation\n",
    "from keras.layers import Conv1D, MaxPooling1D, Flatten, Conv2D, BatchNormalization, Lambda\n",
    "from keras.layers.advanced_activations import ELU\n",
    "from keras.callbacks import ModelCheckpoint, TensorBoard, ReduceLROnPlateau\n",
    "from keras import backend\n",
    "from keras.utils import np_utils\n",
    "from keras.optimizers import Adam, RMSprop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_1 (LSTM)                (None, 100, 64)           21760     \n",
      "_________________________________________________________________\n",
      "lstm_2 (LSTM)                (None, 100, 32)           12416     \n",
      "_________________________________________________________________\n",
      "time_distributed_1 (TimeDist (None, 100, 1)            33        \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 100)               0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 2)                 202       \n",
      "=================================================================\n",
      "Total params: 34,411\n",
      "Trainable params: 34,411\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# batch_size=batch_size, input_shape=(train_batch.shape[1], train_batch.shape[2]),\n",
    "number_neurons_layer_1 = 64\n",
    "number_neurons_layer_2 = 32\n",
    "dropout = 0.2\n",
    "recurrent_dropout = 0.2\n",
    "\n",
    "# batch_size=batch_size\n",
    "# dropout=dropout, recurrent_dropout=recurrent_dropout,\n",
    "model = Sequential()\n",
    "model.add(LSTM(units=number_neurons_layer_1, dropout= dropout, input_shape=(seg_length, mfcc), return_sequences=True))\n",
    "model.add(LSTM(units=number_neurons_layer_2, dropout= dropout, return_sequences=True))\n",
    "# model.add(Dense(units=20, activation='softmax'))\n",
    "model.add(TimeDistributed(Dense(1, activation='sigmoid')))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(2, activation= 'softmax'))\n",
    "# opt = Adam(lr =)\n",
    "\n",
    "tensorboard = TensorBoard(log_dir='./mfcc_log')  \n",
    "# optimizer = opt\n",
    "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # categorical_crossentropy \n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# callbacks = [EarlyStopping(monitor='val_loss', patience=10),\n",
    "#              ModelCheckpoint(filepath='best_model.h5', monitor='val_loss', save_best_only=True)]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Runnig Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/hodashajari/.conda/envs/SVMserv36/lib/python3.6/site-packages/ipykernel_launcher.py:3: UserWarning: The semantics of the Keras 2 argument `steps_per_epoch` is not the same as the Keras 1 argument `samples_per_epoch`. `steps_per_epoch` is the number of batches to draw from the generator at each epoch. Basically steps_per_epoch = samples_per_epoch/batch_size. Similarly `nb_val_samples`->`validation_steps` and `val_samples`->`steps` arguments have changed. Update your method calls accordingly.\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/home/hodashajari/.conda/envs/SVMserv36/lib/python3.6/site-packages/ipykernel_launcher.py:3: UserWarning: Update your `fit_generator` call to the Keras 2 API: `fit_generator(generator=<generator..., callbacks=[<keras.ca..., validation_data=<generator..., validation_steps=50, steps_per_epoch=50, epochs=300)`\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/300\n",
      "50/50 [==============================] - 18s 353ms/step - loss: 0.6933 - acc: 0.5088 - val_loss: 0.6935 - val_acc: 0.4750\n",
      "Epoch 2/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6941 - acc: 0.4825 - val_loss: 0.6920 - val_acc: 0.5275\n",
      "Epoch 3/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.6944 - acc: 0.5038 - val_loss: 0.6891 - val_acc: 0.5387\n",
      "Epoch 4/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.6919 - acc: 0.5287 - val_loss: 0.6894 - val_acc: 0.5400\n",
      "Epoch 5/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6875 - acc: 0.5325 - val_loss: 0.6852 - val_acc: 0.5437\n",
      "Epoch 6/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6888 - acc: 0.5400 - val_loss: 0.6803 - val_acc: 0.5600\n",
      "Epoch 7/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.6742 - acc: 0.5800 - val_loss: 0.6659 - val_acc: 0.6062\n",
      "Epoch 8/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6718 - acc: 0.5875 - val_loss: 0.6754 - val_acc: 0.5713\n",
      "Epoch 9/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.6587 - acc: 0.6088 - val_loss: 0.6673 - val_acc: 0.5988\n",
      "Epoch 10/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6636 - acc: 0.6100 - val_loss: 0.6458 - val_acc: 0.6250\n",
      "Epoch 11/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6529 - acc: 0.6188 - val_loss: 0.6518 - val_acc: 0.6212\n",
      "Epoch 12/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.6612 - acc: 0.5912 - val_loss: 0.6674 - val_acc: 0.5925\n",
      "Epoch 13/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.6466 - acc: 0.6350 - val_loss: 0.6523 - val_acc: 0.6338\n",
      "Epoch 14/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.6656 - acc: 0.5950 - val_loss: 0.6666 - val_acc: 0.5975\n",
      "Epoch 15/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.6537 - acc: 0.6312 - val_loss: 0.6541 - val_acc: 0.6262\n",
      "Epoch 16/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6422 - acc: 0.6375 - val_loss: 0.6649 - val_acc: 0.6112\n",
      "Epoch 17/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6458 - acc: 0.6300 - val_loss: 0.6458 - val_acc: 0.6262\n",
      "Epoch 18/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6383 - acc: 0.6637 - val_loss: 0.6531 - val_acc: 0.6112\n",
      "Epoch 19/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6446 - acc: 0.6225 - val_loss: 0.6691 - val_acc: 0.6000\n",
      "Epoch 20/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.6607 - acc: 0.6225 - val_loss: 0.6387 - val_acc: 0.6450\n",
      "Epoch 21/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6170 - acc: 0.6737 - val_loss: 0.6788 - val_acc: 0.6175\n",
      "Epoch 22/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.6144 - acc: 0.6625 - val_loss: 0.6440 - val_acc: 0.6388\n",
      "Epoch 23/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.6412 - acc: 0.6388 - val_loss: 0.6594 - val_acc: 0.6225\n",
      "Epoch 24/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6486 - acc: 0.6150 - val_loss: 0.6357 - val_acc: 0.6500\n",
      "Epoch 25/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6490 - acc: 0.6238 - val_loss: 0.6362 - val_acc: 0.6412\n",
      "Epoch 26/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6386 - acc: 0.6650 - val_loss: 0.6655 - val_acc: 0.5962\n",
      "Epoch 27/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6161 - acc: 0.6737 - val_loss: 0.6180 - val_acc: 0.6700\n",
      "Epoch 28/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6342 - acc: 0.6613 - val_loss: 0.6324 - val_acc: 0.6425\n",
      "Epoch 29/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6242 - acc: 0.6450 - val_loss: 0.6557 - val_acc: 0.6312\n",
      "Epoch 30/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.6256 - acc: 0.6525 - val_loss: 0.6460 - val_acc: 0.6388\n",
      "Epoch 31/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6233 - acc: 0.6400 - val_loss: 0.6332 - val_acc: 0.6613\n",
      "Epoch 32/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6327 - acc: 0.6488 - val_loss: 0.6583 - val_acc: 0.6175\n",
      "Epoch 33/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5970 - acc: 0.6975 - val_loss: 0.6352 - val_acc: 0.6525\n",
      "Epoch 34/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6343 - acc: 0.6475 - val_loss: 0.6469 - val_acc: 0.6412\n",
      "Epoch 35/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.6091 - acc: 0.6688 - val_loss: 0.6165 - val_acc: 0.6750\n",
      "Epoch 36/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6087 - acc: 0.6700 - val_loss: 0.6446 - val_acc: 0.6450\n",
      "Epoch 37/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6229 - acc: 0.6562 - val_loss: 0.6500 - val_acc: 0.6325\n",
      "Epoch 38/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.6104 - acc: 0.6663 - val_loss: 0.6418 - val_acc: 0.6350\n",
      "Epoch 39/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.6164 - acc: 0.6900 - val_loss: 0.6548 - val_acc: 0.6250\n",
      "Epoch 40/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6242 - acc: 0.6737 - val_loss: 0.6442 - val_acc: 0.6312\n",
      "Epoch 41/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6236 - acc: 0.6625 - val_loss: 0.6293 - val_acc: 0.6512\n",
      "Epoch 42/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6065 - acc: 0.6813 - val_loss: 0.6316 - val_acc: 0.6625\n",
      "Epoch 43/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5996 - acc: 0.6937 - val_loss: 0.6286 - val_acc: 0.6575\n",
      "Epoch 44/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.6141 - acc: 0.6763 - val_loss: 0.6443 - val_acc: 0.6275\n",
      "Epoch 45/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.6161 - acc: 0.6688 - val_loss: 0.6822 - val_acc: 0.6238\n",
      "Epoch 46/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6028 - acc: 0.6875 - val_loss: 0.6615 - val_acc: 0.6225\n",
      "Epoch 47/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.6157 - acc: 0.6600 - val_loss: 0.6464 - val_acc: 0.6262\n",
      "Epoch 48/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6256 - acc: 0.6488 - val_loss: 0.6280 - val_acc: 0.6575\n",
      "Epoch 49/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.6060 - acc: 0.6637 - val_loss: 0.6310 - val_acc: 0.6650\n",
      "Epoch 50/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.6167 - acc: 0.6650 - val_loss: 0.6167 - val_acc: 0.6538\n",
      "Epoch 51/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5816 - acc: 0.7013 - val_loss: 0.6322 - val_acc: 0.6675\n",
      "Epoch 52/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.6093 - acc: 0.6763 - val_loss: 0.6718 - val_acc: 0.6075\n",
      "Epoch 53/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6184 - acc: 0.6650 - val_loss: 0.6162 - val_acc: 0.6787\n",
      "Epoch 54/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5905 - acc: 0.6937 - val_loss: 0.6164 - val_acc: 0.6663\n",
      "Epoch 55/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5920 - acc: 0.7025 - val_loss: 0.6388 - val_acc: 0.6338\n",
      "Epoch 56/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6023 - acc: 0.6825 - val_loss: 0.6405 - val_acc: 0.6500\n",
      "Epoch 57/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6045 - acc: 0.6787 - val_loss: 0.6341 - val_acc: 0.6550\n",
      "Epoch 58/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6039 - acc: 0.6775 - val_loss: 0.6433 - val_acc: 0.6375\n",
      "Epoch 59/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5910 - acc: 0.6838 - val_loss: 0.6264 - val_acc: 0.6613\n",
      "Epoch 60/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5779 - acc: 0.7075 - val_loss: 0.6287 - val_acc: 0.6538\n",
      "Epoch 61/300\n",
      "50/50 [==============================] - 16s 322ms/step - loss: 0.5785 - acc: 0.7025 - val_loss: 0.6040 - val_acc: 0.6825\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 62/300\n",
      "50/50 [==============================] - 16s 314ms/step - loss: 0.5809 - acc: 0.7013 - val_loss: 0.5726 - val_acc: 0.7087\n",
      "Epoch 63/300\n",
      "50/50 [==============================] - 16s 313ms/step - loss: 0.5939 - acc: 0.6850 - val_loss: 0.5923 - val_acc: 0.6763\n",
      "Epoch 64/300\n",
      "50/50 [==============================] - 16s 313ms/step - loss: 0.6035 - acc: 0.6775 - val_loss: 0.6190 - val_acc: 0.6713\n",
      "Epoch 65/300\n",
      "50/50 [==============================] - 16s 315ms/step - loss: 0.6025 - acc: 0.6713 - val_loss: 0.6147 - val_acc: 0.6525\n",
      "Epoch 66/300\n",
      "50/50 [==============================] - 16s 311ms/step - loss: 0.5975 - acc: 0.6975 - val_loss: 0.6275 - val_acc: 0.6637\n",
      "Epoch 67/300\n",
      "50/50 [==============================] - 16s 313ms/step - loss: 0.5776 - acc: 0.6937 - val_loss: 0.5986 - val_acc: 0.6863\n",
      "Epoch 68/300\n",
      "50/50 [==============================] - 16s 312ms/step - loss: 0.5803 - acc: 0.7150 - val_loss: 0.6198 - val_acc: 0.6637\n",
      "Epoch 69/300\n",
      "50/50 [==============================] - 16s 310ms/step - loss: 0.5652 - acc: 0.7125 - val_loss: 0.6231 - val_acc: 0.6713\n",
      "Epoch 70/300\n",
      "50/50 [==============================] - 16s 311ms/step - loss: 0.5773 - acc: 0.6963 - val_loss: 0.6619 - val_acc: 0.6575\n",
      "Epoch 71/300\n",
      "50/50 [==============================] - 16s 311ms/step - loss: 0.5997 - acc: 0.6937 - val_loss: 0.6250 - val_acc: 0.6500\n",
      "Epoch 72/300\n",
      "50/50 [==============================] - 16s 312ms/step - loss: 0.5946 - acc: 0.6787 - val_loss: 0.6229 - val_acc: 0.6425\n",
      "Epoch 73/300\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.5630 - acc: 0.7150 - val_loss: 0.6212 - val_acc: 0.6750\n",
      "Epoch 74/300\n",
      "50/50 [==============================] - 17s 339ms/step - loss: 0.5563 - acc: 0.7125 - val_loss: 0.5936 - val_acc: 0.6950\n",
      "Epoch 75/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5820 - acc: 0.6963 - val_loss: 0.6309 - val_acc: 0.6725\n",
      "Epoch 76/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5862 - acc: 0.6875 - val_loss: 0.6257 - val_acc: 0.6425\n",
      "Epoch 77/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5669 - acc: 0.6975 - val_loss: 0.5810 - val_acc: 0.7013\n",
      "Epoch 78/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5669 - acc: 0.7163 - val_loss: 0.6194 - val_acc: 0.6675\n",
      "Epoch 79/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.6014 - acc: 0.6763 - val_loss: 0.6213 - val_acc: 0.6475\n",
      "Epoch 80/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5895 - acc: 0.7000 - val_loss: 0.6375 - val_acc: 0.6388\n",
      "Epoch 81/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.6106 - acc: 0.6575 - val_loss: 0.6292 - val_acc: 0.6600\n",
      "Epoch 82/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5957 - acc: 0.6725 - val_loss: 0.6500 - val_acc: 0.6400\n",
      "Epoch 83/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.6076 - acc: 0.6875 - val_loss: 0.6351 - val_acc: 0.6375\n",
      "Epoch 84/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5825 - acc: 0.7050 - val_loss: 0.6102 - val_acc: 0.6737\n",
      "Epoch 85/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5796 - acc: 0.7025 - val_loss: 0.6362 - val_acc: 0.6400\n",
      "Epoch 86/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5920 - acc: 0.6900 - val_loss: 0.6528 - val_acc: 0.6450\n",
      "Epoch 87/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5471 - acc: 0.7300 - val_loss: 0.6318 - val_acc: 0.6675\n",
      "Epoch 88/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5622 - acc: 0.7100 - val_loss: 0.6252 - val_acc: 0.6600\n",
      "Epoch 89/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5684 - acc: 0.6963 - val_loss: 0.6116 - val_acc: 0.6625\n",
      "Epoch 90/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5579 - acc: 0.7300 - val_loss: 0.6213 - val_acc: 0.6550\n",
      "Epoch 91/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5678 - acc: 0.7000 - val_loss: 0.6329 - val_acc: 0.6462\n",
      "Epoch 92/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5835 - acc: 0.7037 - val_loss: 0.6127 - val_acc: 0.6500\n",
      "Epoch 93/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5742 - acc: 0.7062 - val_loss: 0.6193 - val_acc: 0.6587\n",
      "Epoch 94/300\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.5935 - acc: 0.6950 - val_loss: 0.6337 - val_acc: 0.6462\n",
      "Epoch 95/300\n",
      "50/50 [==============================] - 16s 316ms/step - loss: 0.5887 - acc: 0.7025 - val_loss: 0.6035 - val_acc: 0.6500\n",
      "Epoch 96/300\n",
      "50/50 [==============================] - 16s 313ms/step - loss: 0.5506 - acc: 0.7113 - val_loss: 0.6526 - val_acc: 0.6462\n",
      "Epoch 97/300\n",
      "50/50 [==============================] - 16s 315ms/step - loss: 0.5719 - acc: 0.7025 - val_loss: 0.6152 - val_acc: 0.6737\n",
      "Epoch 98/300\n",
      "50/50 [==============================] - 16s 313ms/step - loss: 0.5863 - acc: 0.6937 - val_loss: 0.6386 - val_acc: 0.6575\n",
      "Epoch 99/300\n",
      "50/50 [==============================] - 17s 338ms/step - loss: 0.5733 - acc: 0.7013 - val_loss: 0.6058 - val_acc: 0.6687\n",
      "Epoch 100/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5859 - acc: 0.6900 - val_loss: 0.5809 - val_acc: 0.7025\n",
      "Epoch 101/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5663 - acc: 0.7350 - val_loss: 0.6237 - val_acc: 0.6613\n",
      "Epoch 102/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5736 - acc: 0.7062 - val_loss: 0.6370 - val_acc: 0.6675\n",
      "Epoch 103/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.6150 - acc: 0.6675 - val_loss: 0.6233 - val_acc: 0.6637\n",
      "Epoch 104/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5550 - acc: 0.7200 - val_loss: 0.6246 - val_acc: 0.6700\n",
      "Epoch 105/300\n",
      "50/50 [==============================] - 17s 341ms/step - loss: 0.5470 - acc: 0.7100 - val_loss: 0.5574 - val_acc: 0.7212\n",
      "Epoch 106/300\n",
      "50/50 [==============================] - 15s 309ms/step - loss: 0.5471 - acc: 0.7388 - val_loss: 0.7078 - val_acc: 0.6050\n",
      "Epoch 107/300\n",
      "50/50 [==============================] - 16s 310ms/step - loss: 0.5698 - acc: 0.7137 - val_loss: 0.6183 - val_acc: 0.6512\n",
      "Epoch 108/300\n",
      "50/50 [==============================] - 16s 311ms/step - loss: 0.5670 - acc: 0.7250 - val_loss: 0.6189 - val_acc: 0.6687\n",
      "Epoch 109/300\n",
      "50/50 [==============================] - 16s 313ms/step - loss: 0.5670 - acc: 0.7075 - val_loss: 0.6191 - val_acc: 0.6538\n",
      "Epoch 110/300\n",
      "50/50 [==============================] - 15s 310ms/step - loss: 0.5481 - acc: 0.7188 - val_loss: 0.6318 - val_acc: 0.6587\n",
      "Epoch 111/300\n",
      "50/50 [==============================] - 16s 310ms/step - loss: 0.5598 - acc: 0.7163 - val_loss: 0.6438 - val_acc: 0.6488\n",
      "Epoch 112/300\n",
      "50/50 [==============================] - 16s 311ms/step - loss: 0.5830 - acc: 0.6900 - val_loss: 0.6301 - val_acc: 0.6450\n",
      "Epoch 113/300\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.5486 - acc: 0.7225 - val_loss: 0.6501 - val_acc: 0.6750\n",
      "Epoch 114/300\n",
      "50/50 [==============================] - 17s 348ms/step - loss: 0.5558 - acc: 0.7075 - val_loss: 0.6480 - val_acc: 0.6475\n",
      "Epoch 115/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5593 - acc: 0.7275 - val_loss: 0.5934 - val_acc: 0.6875\n",
      "Epoch 116/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.5496 - acc: 0.7238 - val_loss: 0.6519 - val_acc: 0.6362\n",
      "Epoch 117/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.5634 - acc: 0.7125 - val_loss: 0.6024 - val_acc: 0.6737\n",
      "Epoch 118/300\n",
      "50/50 [==============================] - 17s 348ms/step - loss: 0.5576 - acc: 0.7050 - val_loss: 0.5922 - val_acc: 0.6687\n",
      "Epoch 119/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5463 - acc: 0.7225 - val_loss: 0.6234 - val_acc: 0.6488\n",
      "Epoch 120/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5488 - acc: 0.7188 - val_loss: 0.6295 - val_acc: 0.6262\n",
      "Epoch 121/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.5291 - acc: 0.7350 - val_loss: 0.6452 - val_acc: 0.6550\n",
      "Epoch 122/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5759 - acc: 0.6963 - val_loss: 0.6202 - val_acc: 0.6575\n",
      "Epoch 123/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5494 - acc: 0.7037 - val_loss: 0.5879 - val_acc: 0.6975\n",
      "Epoch 124/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5752 - acc: 0.6950 - val_loss: 0.6059 - val_acc: 0.6737\n",
      "Epoch 125/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5521 - acc: 0.7137 - val_loss: 0.6209 - val_acc: 0.6613\n",
      "Epoch 126/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5706 - acc: 0.7037 - val_loss: 0.6148 - val_acc: 0.6600\n",
      "Epoch 127/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5682 - acc: 0.7037 - val_loss: 0.6088 - val_acc: 0.6687\n",
      "Epoch 128/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5716 - acc: 0.7050 - val_loss: 0.6263 - val_acc: 0.6475\n",
      "Epoch 129/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5588 - acc: 0.7238 - val_loss: 0.5964 - val_acc: 0.6713\n",
      "Epoch 130/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5354 - acc: 0.7288 - val_loss: 0.6283 - val_acc: 0.6725\n",
      "Epoch 131/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5478 - acc: 0.7188 - val_loss: 0.5883 - val_acc: 0.6913\n",
      "Epoch 132/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5611 - acc: 0.7275 - val_loss: 0.6078 - val_acc: 0.6700\n",
      "Epoch 133/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5498 - acc: 0.7350 - val_loss: 0.6003 - val_acc: 0.6925\n",
      "Epoch 134/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5647 - acc: 0.6912 - val_loss: 0.6213 - val_acc: 0.6663\n",
      "Epoch 135/300\n",
      "50/50 [==============================] - 17s 338ms/step - loss: 0.5044 - acc: 0.7700 - val_loss: 0.6571 - val_acc: 0.6288\n",
      "Epoch 136/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5374 - acc: 0.7338 - val_loss: 0.6168 - val_acc: 0.6663\n",
      "Epoch 137/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5512 - acc: 0.7050 - val_loss: 0.6303 - val_acc: 0.6525\n",
      "Epoch 138/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5514 - acc: 0.7500 - val_loss: 0.5778 - val_acc: 0.6925\n",
      "Epoch 139/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5423 - acc: 0.7550 - val_loss: 0.6324 - val_acc: 0.6775\n",
      "Epoch 140/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5463 - acc: 0.7250 - val_loss: 0.6218 - val_acc: 0.6725\n",
      "Epoch 141/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5092 - acc: 0.7625 - val_loss: 0.6099 - val_acc: 0.6837\n",
      "Epoch 142/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5376 - acc: 0.7300 - val_loss: 0.6185 - val_acc: 0.6700\n",
      "Epoch 143/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5642 - acc: 0.6987 - val_loss: 0.6154 - val_acc: 0.6650\n",
      "Epoch 144/300\n",
      "50/50 [==============================] - 17s 340ms/step - loss: 0.5079 - acc: 0.7687 - val_loss: 0.6502 - val_acc: 0.6525\n",
      "Epoch 145/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5294 - acc: 0.7362 - val_loss: 0.6071 - val_acc: 0.6887\n",
      "Epoch 146/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5339 - acc: 0.7262 - val_loss: 0.6174 - val_acc: 0.6713\n",
      "Epoch 147/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5265 - acc: 0.7412 - val_loss: 0.6291 - val_acc: 0.6650\n",
      "Epoch 148/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5230 - acc: 0.7425 - val_loss: 0.6413 - val_acc: 0.6613\n",
      "Epoch 149/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5389 - acc: 0.7212 - val_loss: 0.6657 - val_acc: 0.6412\n",
      "Epoch 150/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5558 - acc: 0.7262 - val_loss: 0.6107 - val_acc: 0.6562\n",
      "Epoch 151/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5431 - acc: 0.7300 - val_loss: 0.6243 - val_acc: 0.6725\n",
      "Epoch 152/300\n",
      "50/50 [==============================] - 16s 319ms/step - loss: 0.5350 - acc: 0.7300 - val_loss: 0.5775 - val_acc: 0.7000\n",
      "Epoch 153/300\n",
      "50/50 [==============================] - 16s 314ms/step - loss: 0.5248 - acc: 0.7400 - val_loss: 0.6175 - val_acc: 0.6863\n",
      "Epoch 154/300\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.5154 - acc: 0.7313 - val_loss: 0.6263 - val_acc: 0.6650\n",
      "Epoch 155/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5433 - acc: 0.7225 - val_loss: 0.6166 - val_acc: 0.6750\n",
      "Epoch 156/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5712 - acc: 0.7000 - val_loss: 0.6340 - val_acc: 0.6538\n",
      "Epoch 157/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5244 - acc: 0.7288 - val_loss: 0.6221 - val_acc: 0.6412\n",
      "Epoch 158/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5492 - acc: 0.7013 - val_loss: 0.6395 - val_acc: 0.6488\n",
      "Epoch 159/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5182 - acc: 0.7525 - val_loss: 0.6048 - val_acc: 0.6725\n",
      "Epoch 160/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5289 - acc: 0.7438 - val_loss: 0.5790 - val_acc: 0.6937\n",
      "Epoch 161/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5325 - acc: 0.7388 - val_loss: 0.6104 - val_acc: 0.6675\n",
      "Epoch 162/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.4993 - acc: 0.7550 - val_loss: 0.6328 - val_acc: 0.6700\n",
      "Epoch 163/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5590 - acc: 0.7013 - val_loss: 0.6066 - val_acc: 0.6800\n",
      "Epoch 164/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5617 - acc: 0.7175 - val_loss: 0.6223 - val_acc: 0.6525\n",
      "Epoch 165/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5482 - acc: 0.7200 - val_loss: 0.5984 - val_acc: 0.6713\n",
      "Epoch 166/300\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.5790 - acc: 0.6975 - val_loss: 0.5834 - val_acc: 0.6875\n",
      "Epoch 167/300\n",
      "50/50 [==============================] - 16s 315ms/step - loss: 0.5566 - acc: 0.7137 - val_loss: 0.6120 - val_acc: 0.6550\n",
      "Epoch 168/300\n",
      "50/50 [==============================] - 16s 314ms/step - loss: 0.5276 - acc: 0.7550 - val_loss: 0.5987 - val_acc: 0.6913\n",
      "Epoch 169/300\n",
      "50/50 [==============================] - 16s 317ms/step - loss: 0.5448 - acc: 0.7212 - val_loss: 0.6080 - val_acc: 0.6937\n",
      "Epoch 170/300\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.5173 - acc: 0.7612 - val_loss: 0.6076 - val_acc: 0.6875\n",
      "Epoch 171/300\n",
      "50/50 [==============================] - 18s 357ms/step - loss: 0.5229 - acc: 0.7475 - val_loss: 0.6019 - val_acc: 0.6875\n",
      "Epoch 172/300\n",
      "50/50 [==============================] - 17s 341ms/step - loss: 0.5218 - acc: 0.7488 - val_loss: 0.6063 - val_acc: 0.6587\n",
      "Epoch 173/300\n",
      "50/50 [==============================] - 17s 348ms/step - loss: 0.5414 - acc: 0.7250 - val_loss: 0.5814 - val_acc: 0.6775\n",
      "Epoch 174/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5225 - acc: 0.7375 - val_loss: 0.6294 - val_acc: 0.6813\n",
      "Epoch 175/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5034 - acc: 0.7562 - val_loss: 0.6318 - val_acc: 0.6750\n",
      "Epoch 176/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5369 - acc: 0.7325 - val_loss: 0.5932 - val_acc: 0.6750\n",
      "Epoch 177/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5228 - acc: 0.7412 - val_loss: 0.6100 - val_acc: 0.6637\n",
      "Epoch 178/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5449 - acc: 0.7288 - val_loss: 0.6127 - val_acc: 0.6600\n",
      "Epoch 179/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.5446 - acc: 0.7212 - val_loss: 0.6164 - val_acc: 0.6575\n",
      "Epoch 180/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5316 - acc: 0.7325 - val_loss: 0.6548 - val_acc: 0.6450\n",
      "Epoch 181/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5272 - acc: 0.7275 - val_loss: 0.5950 - val_acc: 0.6675\n",
      "Epoch 182/300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5447 - acc: 0.7388 - val_loss: 0.5992 - val_acc: 0.6850\n",
      "Epoch 183/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5298 - acc: 0.7288 - val_loss: 0.5893 - val_acc: 0.6987\n",
      "Epoch 184/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5196 - acc: 0.7325 - val_loss: 0.6433 - val_acc: 0.6725\n",
      "Epoch 185/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5310 - acc: 0.7400 - val_loss: 0.5853 - val_acc: 0.6813\n",
      "Epoch 186/300\n",
      "50/50 [==============================] - 17s 342ms/step - loss: 0.5348 - acc: 0.7425 - val_loss: 0.5696 - val_acc: 0.6925\n",
      "Epoch 187/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5424 - acc: 0.7375 - val_loss: 0.5794 - val_acc: 0.6900\n",
      "Epoch 188/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5116 - acc: 0.7438 - val_loss: 0.6600 - val_acc: 0.6663\n",
      "Epoch 189/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5223 - acc: 0.7537 - val_loss: 0.6034 - val_acc: 0.6763\n",
      "Epoch 190/300\n",
      "50/50 [==============================] - 17s 342ms/step - loss: 0.5545 - acc: 0.7238 - val_loss: 0.6060 - val_acc: 0.6637\n",
      "Epoch 191/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.4976 - acc: 0.7625 - val_loss: 0.5693 - val_acc: 0.6950\n",
      "Epoch 192/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5248 - acc: 0.7350 - val_loss: 0.5731 - val_acc: 0.7100\n",
      "Epoch 193/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5350 - acc: 0.7200 - val_loss: 0.5661 - val_acc: 0.7037\n",
      "Epoch 194/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5186 - acc: 0.7450 - val_loss: 0.5758 - val_acc: 0.7075\n",
      "Epoch 195/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.5403 - acc: 0.7350 - val_loss: 0.5941 - val_acc: 0.6775\n",
      "Epoch 196/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5245 - acc: 0.7450 - val_loss: 0.5954 - val_acc: 0.6600\n",
      "Epoch 197/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5140 - acc: 0.7450 - val_loss: 0.6118 - val_acc: 0.6613\n",
      "Epoch 198/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5139 - acc: 0.7562 - val_loss: 0.6153 - val_acc: 0.6800\n",
      "Epoch 199/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.5396 - acc: 0.7412 - val_loss: 0.6268 - val_acc: 0.6462\n",
      "Epoch 200/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5158 - acc: 0.7588 - val_loss: 0.6351 - val_acc: 0.6937\n",
      "Epoch 201/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5460 - acc: 0.7325 - val_loss: 0.5887 - val_acc: 0.6538\n",
      "Epoch 202/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5433 - acc: 0.7225 - val_loss: 0.5894 - val_acc: 0.6800\n",
      "Epoch 203/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5134 - acc: 0.7475 - val_loss: 0.6155 - val_acc: 0.6763\n",
      "Epoch 204/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5248 - acc: 0.7412 - val_loss: 0.5959 - val_acc: 0.6663\n",
      "Epoch 205/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5002 - acc: 0.7550 - val_loss: 0.6789 - val_acc: 0.6575\n",
      "Epoch 206/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5376 - acc: 0.7388 - val_loss: 0.5966 - val_acc: 0.6863\n",
      "Epoch 207/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.4936 - acc: 0.7625 - val_loss: 0.5804 - val_acc: 0.7137\n",
      "Epoch 208/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5155 - acc: 0.7375 - val_loss: 0.5726 - val_acc: 0.6750\n",
      "Epoch 209/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.4923 - acc: 0.7612 - val_loss: 0.6095 - val_acc: 0.6825\n",
      "Epoch 210/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5168 - acc: 0.7525 - val_loss: 0.6376 - val_acc: 0.6700\n",
      "Epoch 211/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5352 - acc: 0.7325 - val_loss: 0.5882 - val_acc: 0.6763\n",
      "Epoch 212/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5013 - acc: 0.7675 - val_loss: 0.6402 - val_acc: 0.6613\n",
      "Epoch 213/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.4727 - acc: 0.7750 - val_loss: 0.6180 - val_acc: 0.6813\n",
      "Epoch 214/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5275 - acc: 0.7375 - val_loss: 0.5814 - val_acc: 0.7013\n",
      "Epoch 215/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5349 - acc: 0.7350 - val_loss: 0.5794 - val_acc: 0.6937\n",
      "Epoch 216/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5061 - acc: 0.7588 - val_loss: 0.6192 - val_acc: 0.6775\n",
      "Epoch 217/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5077 - acc: 0.7438 - val_loss: 0.5928 - val_acc: 0.6950\n",
      "Epoch 218/300\n",
      "50/50 [==============================] - 17s 337ms/step - loss: 0.4961 - acc: 0.7500 - val_loss: 0.6119 - val_acc: 0.6737\n",
      "Epoch 219/300\n",
      "50/50 [==============================] - 16s 314ms/step - loss: 0.5074 - acc: 0.7500 - val_loss: 0.5734 - val_acc: 0.6875\n",
      "Epoch 220/300\n",
      "50/50 [==============================] - 16s 314ms/step - loss: 0.5201 - acc: 0.7362 - val_loss: 0.5761 - val_acc: 0.7050\n",
      "Epoch 221/300\n",
      "50/50 [==============================] - 17s 339ms/step - loss: 0.5441 - acc: 0.7200 - val_loss: 0.6249 - val_acc: 0.6637\n",
      "Epoch 222/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5064 - acc: 0.7425 - val_loss: 0.5579 - val_acc: 0.7100\n",
      "Epoch 223/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.4838 - acc: 0.7775 - val_loss: 0.6453 - val_acc: 0.6775\n",
      "Epoch 224/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.4661 - acc: 0.7825 - val_loss: 0.6282 - val_acc: 0.6763\n",
      "Epoch 225/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5131 - acc: 0.7425 - val_loss: 0.6385 - val_acc: 0.6600\n",
      "Epoch 226/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5021 - acc: 0.7625 - val_loss: 0.6217 - val_acc: 0.6700\n",
      "Epoch 227/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5171 - acc: 0.7512 - val_loss: 0.6194 - val_acc: 0.6650\n",
      "Epoch 228/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.4913 - acc: 0.7512 - val_loss: 0.6111 - val_acc: 0.6950\n",
      "Epoch 229/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5142 - acc: 0.7588 - val_loss: 0.6403 - val_acc: 0.6600\n",
      "Epoch 230/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5252 - acc: 0.7288 - val_loss: 0.5681 - val_acc: 0.6875\n",
      "Epoch 231/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5418 - acc: 0.7338 - val_loss: 0.6070 - val_acc: 0.6675\n",
      "Epoch 232/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5143 - acc: 0.7500 - val_loss: 0.5783 - val_acc: 0.7025\n",
      "Epoch 233/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5070 - acc: 0.7600 - val_loss: 0.5516 - val_acc: 0.7100\n",
      "Epoch 234/300\n",
      "50/50 [==============================] - 17s 348ms/step - loss: 0.5074 - acc: 0.7562 - val_loss: 0.5809 - val_acc: 0.7075\n",
      "Epoch 235/300\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.5227 - acc: 0.7275 - val_loss: 0.5913 - val_acc: 0.6950\n",
      "Epoch 236/300\n",
      "50/50 [==============================] - 16s 315ms/step - loss: 0.4829 - acc: 0.7650 - val_loss: 0.6306 - val_acc: 0.6975\n",
      "Epoch 237/300\n",
      "50/50 [==============================] - 16s 317ms/step - loss: 0.5189 - acc: 0.7450 - val_loss: 0.5931 - val_acc: 0.6900\n",
      "Epoch 238/300\n",
      "50/50 [==============================] - 16s 320ms/step - loss: 0.5498 - acc: 0.7087 - val_loss: 0.5780 - val_acc: 0.6975\n",
      "Epoch 239/300\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.4897 - acc: 0.7675 - val_loss: 0.5564 - val_acc: 0.7150\n",
      "Epoch 240/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.4857 - acc: 0.7800 - val_loss: 0.6107 - val_acc: 0.6775\n",
      "Epoch 241/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.4786 - acc: 0.7775 - val_loss: 0.6024 - val_acc: 0.6887\n",
      "Epoch 242/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.4906 - acc: 0.7800 - val_loss: 0.6493 - val_acc: 0.6875\n",
      "Epoch 243/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5171 - acc: 0.7575 - val_loss: 0.6090 - val_acc: 0.6650\n",
      "Epoch 244/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5294 - acc: 0.7575 - val_loss: 0.5973 - val_acc: 0.6763\n",
      "Epoch 245/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5107 - acc: 0.7412 - val_loss: 0.5706 - val_acc: 0.7013\n",
      "Epoch 246/300\n",
      "50/50 [==============================] - 16s 315ms/step - loss: 0.5228 - acc: 0.7238 - val_loss: 0.6126 - val_acc: 0.6700\n",
      "Epoch 247/300\n",
      "50/50 [==============================] - 16s 316ms/step - loss: 0.4699 - acc: 0.7812 - val_loss: 0.6603 - val_acc: 0.6613\n",
      "Epoch 248/300\n",
      "50/50 [==============================] - 16s 316ms/step - loss: 0.5082 - acc: 0.7525 - val_loss: 0.6100 - val_acc: 0.6825\n",
      "Epoch 249/300\n",
      "50/50 [==============================] - 16s 320ms/step - loss: 0.5148 - acc: 0.7537 - val_loss: 0.6268 - val_acc: 0.6613\n",
      "Epoch 250/300\n",
      "50/50 [==============================] - 17s 348ms/step - loss: 0.4925 - acc: 0.7638 - val_loss: 0.5869 - val_acc: 0.6963\n",
      "Epoch 251/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5236 - acc: 0.7425 - val_loss: 0.5982 - val_acc: 0.6775\n",
      "Epoch 252/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5152 - acc: 0.7250 - val_loss: 0.6033 - val_acc: 0.6787\n",
      "Epoch 253/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.5281 - acc: 0.7438 - val_loss: 0.5885 - val_acc: 0.6800\n",
      "Epoch 254/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5030 - acc: 0.7525 - val_loss: 0.5924 - val_acc: 0.6800\n",
      "Epoch 255/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5372 - acc: 0.7450 - val_loss: 0.5958 - val_acc: 0.6887\n",
      "Epoch 256/300\n",
      "50/50 [==============================] - 17s 342ms/step - loss: 0.5030 - acc: 0.7550 - val_loss: 0.6143 - val_acc: 0.6512\n",
      "Epoch 257/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5183 - acc: 0.7525 - val_loss: 0.6135 - val_acc: 0.6663\n",
      "Epoch 258/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.4967 - acc: 0.7612 - val_loss: 0.6187 - val_acc: 0.6875\n",
      "Epoch 259/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.4824 - acc: 0.7775 - val_loss: 0.6303 - val_acc: 0.6625\n",
      "Epoch 260/300\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.5080 - acc: 0.7687 - val_loss: 0.6176 - val_acc: 0.6700\n",
      "Epoch 261/300\n",
      "50/50 [==============================] - 16s 317ms/step - loss: 0.4752 - acc: 0.7612 - val_loss: 0.6023 - val_acc: 0.6725\n",
      "Epoch 262/300\n",
      "50/50 [==============================] - 16s 316ms/step - loss: 0.5064 - acc: 0.7638 - val_loss: 0.5717 - val_acc: 0.7113\n",
      "Epoch 263/300\n",
      "50/50 [==============================] - 17s 342ms/step - loss: 0.4771 - acc: 0.7638 - val_loss: 0.5833 - val_acc: 0.6963\n",
      "Epoch 264/300\n",
      "50/50 [==============================] - 16s 314ms/step - loss: 0.4672 - acc: 0.7925 - val_loss: 0.6081 - val_acc: 0.6925\n",
      "Epoch 265/300\n",
      "50/50 [==============================] - 16s 316ms/step - loss: 0.5344 - acc: 0.7388 - val_loss: 0.6011 - val_acc: 0.6975\n",
      "Epoch 266/300\n",
      "50/50 [==============================] - 16s 318ms/step - loss: 0.4979 - acc: 0.7500 - val_loss: 0.6264 - val_acc: 0.6663\n",
      "Epoch 267/300\n",
      "50/50 [==============================] - 16s 318ms/step - loss: 0.5447 - acc: 0.7212 - val_loss: 0.5761 - val_acc: 0.6850\n",
      "Epoch 268/300\n",
      "50/50 [==============================] - 17s 342ms/step - loss: 0.5215 - acc: 0.7375 - val_loss: 0.5797 - val_acc: 0.6775\n",
      "Epoch 269/300\n",
      "50/50 [==============================] - 17s 339ms/step - loss: 0.4806 - acc: 0.7762 - val_loss: 0.6214 - val_acc: 0.6937\n",
      "Epoch 270/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.4934 - acc: 0.7638 - val_loss: 0.5960 - val_acc: 0.6950\n",
      "Epoch 271/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5211 - acc: 0.7325 - val_loss: 0.5639 - val_acc: 0.7113\n",
      "Epoch 272/300\n",
      "50/50 [==============================] - 16s 318ms/step - loss: 0.5031 - acc: 0.7600 - val_loss: 0.5993 - val_acc: 0.6850\n",
      "Epoch 273/300\n",
      "50/50 [==============================] - 16s 315ms/step - loss: 0.5306 - acc: 0.7262 - val_loss: 0.6051 - val_acc: 0.6900\n",
      "Epoch 274/300\n",
      "50/50 [==============================] - 16s 316ms/step - loss: 0.5053 - acc: 0.7525 - val_loss: 0.5936 - val_acc: 0.7013\n",
      "Epoch 275/300\n",
      "50/50 [==============================] - 16s 318ms/step - loss: 0.5235 - acc: 0.7600 - val_loss: 0.5884 - val_acc: 0.7075\n",
      "Epoch 276/300\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.4727 - acc: 0.7662 - val_loss: 0.6252 - val_acc: 0.6687\n",
      "Epoch 277/300\n",
      "50/50 [==============================] - 17s 342ms/step - loss: 0.5169 - acc: 0.7300 - val_loss: 0.5856 - val_acc: 0.6787\n",
      "Epoch 278/300\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.5135 - acc: 0.7537 - val_loss: 0.5568 - val_acc: 0.7113\n",
      "Epoch 279/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.4812 - acc: 0.7712 - val_loss: 0.5645 - val_acc: 0.6913\n",
      "Epoch 280/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5041 - acc: 0.7475 - val_loss: 0.5688 - val_acc: 0.7037\n",
      "Epoch 281/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5121 - acc: 0.7588 - val_loss: 0.5712 - val_acc: 0.6963\n",
      "Epoch 282/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.4900 - acc: 0.7512 - val_loss: 0.6389 - val_acc: 0.6663\n",
      "Epoch 283/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.4962 - acc: 0.7550 - val_loss: 0.5862 - val_acc: 0.6863\n",
      "Epoch 284/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.4858 - acc: 0.7712 - val_loss: 0.6128 - val_acc: 0.6837\n",
      "Epoch 285/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.5055 - acc: 0.7537 - val_loss: 0.5678 - val_acc: 0.7163\n",
      "Epoch 286/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.5280 - acc: 0.7463 - val_loss: 0.5960 - val_acc: 0.6775\n",
      "Epoch 287/300\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.4928 - acc: 0.7537 - val_loss: 0.5744 - val_acc: 0.6963\n",
      "Epoch 288/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5214 - acc: 0.7338 - val_loss: 0.5921 - val_acc: 0.6813\n",
      "Epoch 289/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.4938 - acc: 0.7662 - val_loss: 0.6160 - val_acc: 0.6863\n",
      "Epoch 290/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.4894 - acc: 0.7675 - val_loss: 0.5933 - val_acc: 0.6925\n",
      "Epoch 291/300\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.4765 - acc: 0.7900 - val_loss: 0.6423 - val_acc: 0.6987\n",
      "Epoch 292/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.5331 - acc: 0.7325 - val_loss: 0.6254 - val_acc: 0.6925\n",
      "Epoch 293/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.4975 - acc: 0.7575 - val_loss: 0.5977 - val_acc: 0.6900\n",
      "Epoch 294/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.4745 - acc: 0.7675 - val_loss: 0.5601 - val_acc: 0.6987\n",
      "Epoch 295/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.4789 - acc: 0.7600 - val_loss: 0.6025 - val_acc: 0.6863\n",
      "Epoch 296/300\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.4974 - acc: 0.7525 - val_loss: 0.6079 - val_acc: 0.6613\n",
      "Epoch 297/300\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.4953 - acc: 0.7550 - val_loss: 0.5935 - val_acc: 0.6787\n",
      "Epoch 298/300\n",
      "50/50 [==============================] - 16s 318ms/step - loss: 0.4999 - acc: 0.7562 - val_loss: 0.6111 - val_acc: 0.6950\n",
      "Epoch 299/300\n",
      "50/50 [==============================] - 16s 316ms/step - loss: 0.4891 - acc: 0.7650 - val_loss: 0.5850 - val_acc: 0.6800\n",
      "Epoch 300/300\n",
      "50/50 [==============================] - 16s 317ms/step - loss: 0.4980 - acc: 0.7525 - val_loss: 0.5890 - val_acc: 0.6950\n"
     ]
    }
   ],
   "source": [
    "model.fit_generator(generator=batch_generator(mfcc_train, seg_length, batch_size), callbacks=[tensorboard],\n",
    "                    validation_data=validation_batch_generator(mfcc_test, seg_length, batch_size), validation_steps=50,  \n",
    "                    steps_per_epoch=50, nb_epoch=300) \n",
    "# validation_step : number of batches to be passed from validation_generator at the end of each epoch\n",
    "model.save('mfcc_drop_out.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# def test_split(seg_length, mfcc):\n",
    "#     song\n",
    "#     for song in range(len(mfcc)):\n",
    "#         total_frames = np.shape(song)[1]\n",
    "#         segs = total_frames//100\n",
    "#         song_segs = np.zeros([segs,20,100])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import load_model\n",
    "model = load_model('mfcc_drop_out.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Accuracy of Data Sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def label_predict(data_set):\n",
    "    import sklearn.metrics as mt\n",
    "    \n",
    "    label = np.zeros(len(data_set), dtype=int)\n",
    "    # print(label.shape)\n",
    "\n",
    "    for song_num, item in enumerate(data_set): \n",
    "        total_frames = np.shape(item)[1]\n",
    "        num_segs = total_frames//100\n",
    "        data_segments = np.zeros([num_segs, 100 , 20])\n",
    "        mark = 0\n",
    "        for i in range (num_segs):\n",
    "            temp = item[:,mark:mark+100].T\n",
    "            data_segments[i,:,:] = temp\n",
    "            mark += 100\n",
    "        #print(total_frames)\n",
    "        #print(np.shape(test_data))\n",
    "        #print(test_data)\n",
    "        y = model.predict_classes(data_segments)\n",
    "        #print(y)\n",
    "        votes = sum(y)\n",
    "        if votes> num_segs//2 :\n",
    "\n",
    "            label[song_num] = 1\n",
    "            \n",
    "    \n",
    "    return label\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_accuracy= 0.9013333333333333\n",
      "[[265  37]\n",
      " [  0  73]]\n"
     ]
    }
   ],
   "source": [
    "pred_label_train = label_predict(mfcc_train)\n",
    "\n",
    "a = np.ones(no_NonProg, dtype=np.int)\n",
    "b = np.zeros(no_Prog, dtype=np.int)    \n",
    "true_label_train = np.concatenate((a,b), axis=None)\n",
    "\n",
    "import sklearn.metrics as mt\n",
    "\n",
    "train_accuracy = mt.accuracy_score(true_label_train,pred_label_train)\n",
    "print('train_accuracy=', train_accuracy)\n",
    "conf_matrix = mt.confusion_matrix(true_label_train,pred_label_train, labels=[1, 0])\n",
    "print(conf_matrix)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_accuracy= 0.8152173913043478\n",
      "[[55 16]\n",
      " [ 1 20]]\n"
     ]
    }
   ],
   "source": [
    "pred_label_test = label_predict(mfcc_test)\n",
    "\n",
    "a = np.ones(no_NonProg_test, dtype=np.int)\n",
    "b = np.zeros(no_Prog_test, dtype=np.int)    \n",
    "true_label_test = np.concatenate((a,b), axis=None)\n",
    "\n",
    "accuracy = mt.accuracy_score(true_label_test,pred_label_test)\n",
    "print('test_accuracy=', accuracy)\n",
    "test_conf_matrix = mt.confusion_matrix(true_label_test,pred_label_test, labels=[1, 0])\n",
    "print(test_conf_matrix)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SVMserv36",
   "language": "python",
   "name": "svmserv36"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
